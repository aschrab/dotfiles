# frozen_string_literal: true

# rubocop:disable Lint/MissingCopEnableDirective
# rubocop:disable Style/CommentedKeyword
# rubocop:disable Style/OptionalBooleanParameter
# rubocop:disable Naming/PredicateName
# rubocop:disable Lint/UselessAssignment
# rubocop:disable Metrics/AbcSize
# rubocop:disable Style/Documentation
# rubocop:disable Metrics/MethodLength

Pry.config.editor = 'vim'
Pry.config.color = true

class Pry
  class Pager
    # Override options that are passed to `less`
    class SystemPager
      def self.default_pager
        'less -F -r'
      end
    end
  end
end

# Issue beep at start of session to set terminal urgent hint.
# This will be mostly unnoticed in active session, but useful if I hit a `binding.pry` somewhere unseen.
begin
require 'tzinfo'
Pry.hooks.add_hook(:before_session, 'start-notice') do |output, _binding, _pry|
  output.puts "\aðŸ”” Session started at #{TZInfo::Timezone.get('America/New_York').now}"
end
rescue LoadError
  puts "Failed to load 'tzinfo' library"
end

def term_color(name, text) # {{{
  Pry.color ? Pry::Helpers::Text.send(name, text) : text
end # }}}

def prompt_color(name, text) # {{{
  if Pry.color
    term_color name, text
  else
    text
  end
end # }}}

main_prompt = proc do |object, nest_level, _pry|
  prompt  = prompt_color :magenta, Pry.view_clip(object)
  prompt += ":#{nest_level}" if nest_level.positive?
  prompt += prompt_color :cyan, ' Â» '
end
wait_prompt = proc { prompt_color :cyan, 'Â» ' }

Pry.config.prompt = Pry::Prompt.new('custom', 'My prompt', [main_prompt, wait_prompt])

# use awesome print for output if available
begin
  require 'awesome_print'
  AwesomePrint.pry!
rescue LoadError
  # Missing goodies, bummer
end

begin
  require 'json'
rescue LoadError
  # Oh, well
end

# Setup hirb if it's available
begin
  require 'hirb'
rescue LoadError
  # Missing goodies, bummer
end
if defined? Hirb
  # Dirty hack to support in-session Hirb.disable/enable
  Hirb::View.instance_eval do
    def enable_output_method
      @output_method = true
      @default_print ||= Pry.config.print
      Pry.config.print = proc do |output, value, pry|
        Hirb::View.view_or_page_output(value) || @default_print.call(output, value, pry)
      end
    end

    def disable_output_method
      Pry.config.print = @default_print
      @output_method = nil
    end
  end

  Hirb.enable
end

if defined?(PryByebug)
  Pry.commands.alias_command 'c', 'continue'
  Pry.commands.alias_command 's', 'step'
  Pry.commands.alias_command 'n', 'next'
  Pry.commands.alias_command 'f', 'finish'
end

# Hit `,` to repeat last command
Pry::Commands.command(',', 'repeat last command') do
  cmd = Pry.history.to_a[-2]
  # pry_instance.run_command cmd
  Pry.toplevel_binding.eval cmd
end

# Methods to generate "toy" Hash or Array objects{{{
# Copied from https://gist.github.com/807492
class Array
  def self.toy(size = 10, &block)
    block_given? ? Array.new(size, &block) : Array.new(size) { |i| i + 1 }
  end
end

class Hash
  def self.toy(size = 10)
    Hash[Array.toy(size) { |c| (96 + (c + 1)).chr.to_sym }.zip(Array.toy(size))]
  end
end
# }}}

class Integer
  def inspect
    to_s.split('').reverse.each_slice(3).map { |x| x.reverse.join '' }.reverse.join('_')
  end
end

begin
  require 'base64'
  class String
    def to_base64(url_safe = false)
      if url_safe
        Base64.urlsafe_encode64(self).sub(/=+$/, '')
      else
        Base64.encode64(self).gsub(/\s+/, '')
      end
    end

    def from_base64
      if match %r{[/+=]}
        Base64.decode64 self
      else
        Base64.urlsafe_decode64 self
      end
    end

    def clip
      $stderr.print "\e]52;pc;#{to_base64}\a"
      self
    end

    def browse
      system 'open', '-u', self
    end
  end

  class Class
    def clip
      tap { to_s.clip }
    end
  end
rescue StandardError
  # Oh, well
end

def clip
  open('|clip', &:gets)
end

# Add `where_is` method to show location where a method or class is defined
# From https://gist.github.com/wtaysom/1236979
module Where
  class << self
    def is_proc(proc)
      source_location(proc)
    end

    def is_method(klass, method_name)
      source_location(klass.method(method_name))
    end

    def is_instance_method(klass, method_name)
      source_location(klass.instance_method(method_name))
    end

    def are_methods(klass, method_name)
      are_via_extractor(:method, klass, method_name)
    end

    def are_instance_methods(klass, method_name)
      are_via_extractor(:method, klass, method_name)
    end

    def is_class(klass)
      methods = defined_methods(klass)
      file_groups = methods.group_by { |sl| sl[0] }
      file_counts = file_groups.map do |file, sls|
        lines = sls.map { |sl| sl[1] }
        count = lines.size
        line = lines.min
        { file: file, count: count, line: line }
      end
      file_counts.sort_by! { |fc| fc[:count] }
      source_locations = file_counts.map { |fc| [fc[:file], fc[:line]] }
    end

    # Raises ArgumentError if klass does not have any Ruby methods defined in it.
    def is_class_primarily(klass)
      source_locations = is_class(klass)
      if source_locations.empty?
        methods = defined_methods(klass)
        raise ArgumentError, (if methods.empty?
                                "#{klass} has no methods"
                              else
                                "#{klass} only has built-in methods (#{methods.size} in total)"
                              end)
      end
      source_locations[0]
    end

    private

    def source_location(method)
      method.source_location || (
        method.to_s =~ /: (.*)>/
        $1
      )
    end

    def are_via_extractor(extractor, klass, method_name)
      methods = klass.ancestors.map do |ancestor|
        method = ancestor.send(extractor, method_name)
        source_location(method) if method.owner == ancestor
      end
      methods.compact!
      methods
    end

    def defined_methods(klass)
      methods = klass.methods(false).map { |m| klass.method(m) } +
                klass.instance_methods(false).map { |m| klass.instance_method(m) }
      methods.map!(&:source_location)
      methods.compact!
      methods
    end
  end
end

def where_is(klass, method = nil)
  if method
    begin
      Where.is_instance_method(klass, method)
    rescue NameError
      Where.is_method(klass, method)
    end
  else
    Where.is_class_primarily(klass)
  end
end

Pry::Commands.create_command 'where_defined' do
  description 'Look for definition of method'

  command_options keep_retval: true

  def process
    klass = args[1] || target_self.class

    if (name = args.first)
      name = name.sub(/^:/, '')
      begin
        Where.is_instance_method(klass, name)
      rescue NameError
        Where.is_method(klass, name)
      end
    else
      Where.is_class_primarily(klass)
    end
  end
end

# vim: ft=ruby
