# vim: ft=gitconfig tabstop=4 shiftwidth=4 noexpandtab
[core]
	pager        = less -R
	#autocrlf    = input
	safecrlf     = true
	#excludesfile = ~/.gitignore
	preloadindex = yes
	commentChar  = !
	hooksPath = ~/.git_template/hooks

[user]
	name          = Aaron Schrab
	#email         = aaron@schrab.com
	useconfigonly = true
	signingkey    = 6DB5C725

[credential]
	helper = cache

[advice]
	statusHints = no
	detachedHead = false

[status]
	submodulesummary = true
	showUntrackedFiles = all

[log]
	abbrevCommit = true
	decorate = auto
	mailmap = true

[diff]
	renames        = copies
	mnemonicprefix = yes
	algorithm      = patience
	#algorithm      = histogram # Too new for some of the systems I use
	compactionHeuristic =  yes
	indentHeuristic = yes
	colorMoved = yes
	colorMovedWS = ignore-space-at-eol,ignore-space-change

[diff "ini"]
	xfuncname = "^\\[.*\\]"

[commit]
	verbose = yes

[revert]
	reference = true

[fetch]
	prune = yes

[pull]
	ff = only
[rebase]
	autosquash = true
	missingCommitsCheck = error
	instructionFormat = "[%aN] %s"
[push]
	default = current
	autoSetupRemote = true

[merge]
	conflictstyle = diff3
	defaultToUpstream = yes
	log = 999
	tool = vimdiff

[branch "master"]
	mergeOptions = --ff-only

[init]
	# templatedir = ~/.git_template
	defaultBranch = master

[help]
	autocorrect = 15

[mergetool "fugitive"]
	cmd = nvim -f -c "Gdiff!" "$MERGED"

[mergetool "vimdiff"]
	layout = "LOCAL,@MERGED,REMOTE + BASE,REMOTE + BASE,LOCAL"

[diff]
	tool = fugitive
[difftool]
	prompt = false
[difftool "kitty"]
	cmd = kitty +kitten diff $LOCAL $REMOTE
	trustExitCode = true

[rerere]
	enabled = yes
	autoupdate = yes

[alias]
	g           = "!f() { git $@; }; f"
	git         = "!f() { git $@; }; f"
	v           = "!git gitv"
	gitv        = "!f() { vim $(git rev-parse --git-dir)/index -c \":Flog $@\" -c ':tabclose 1'; }; f"
	root        = rev-parse --show-toplevel
	url         = "!f() { git remote get-url \"${1:-$(git remote)}\"; }; f"
	browse      = "!f() { open \"$(git url \"$@\")\" ; }; f"
	conf        = config
	co          = "!f() { echo Use switch or restore >&2; exit 1; }; f"
	ci          = commit -v
	cia         = commit -v -a
	ad          = add
	default     = "!f() { git branch --list --format='%(refname:short)' master main | sort | head -n 1; }; f"
	d           = diff
	dif         = diff
	difff       = diff
	ds          = diff --staged
	id          = log --no-walk --format=%h
	reference   = log --no-walk --format=reference
	sh          = show -b
	sho         = show -b
	st          = status -sb
	sw          = switch
	b           = branch
	pick        = cherry-pick
	fethc       = fetch
	up          = "!echo Use pull >&2 ; exit 1"
	ctags       = "!ctags --recurse"
	ff          = merge --ff-only
	l1          = log --pretty=format:"'%C(yellow)%h %>(15,trunc)%C(green)%aN %<(14)%C(blue)%ar %C(reset)%<(70,trunc)%s'"
	ls          = log --decorate --graph --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]"
	ll          = log --decorate --numstat --date=short --pretty=format:"%C(yellow)%ad\\ %h%Cred%d\\ %Creset%s%Cblue\\ [%cn]"
	f           = "!f() { git foresta \"$@\" | less --chop-long-lines; }; f"
	tree        = "!f() { base=$(git show-branch --merge-base $@) && git ls --boundary ^$base^ $@ --; }; f"
	last        = log --stat -p -1 HEAD
	stashed     = stash list --pretty='%gd: %Cred%h%Creset %Cgreen[%ar]%Creset %s'
	unstage     = reset HEAD --
	review      = "!f() { for rev in $(git log --reverse --format=%H $@); do git show $rev; done; }; f"
	show-commit = log -1 -p
	unmerged    = diff --name-only --diff-filter=U
	lol         = log --graph --decorate --pretty=oneline --abbrev-commit
	puhs        = push
	push-new-repo = push --receive-pack=git-receive-new-repo --all
	submodule-annotate = submodule foreach 'git update-ref --create-reflog -m \"Update from parent repo\" refs/heads/submodule-parent $sha1 || true'
	wtree = worktree
	exclude =  "!f() { printf /%s\\\\n \"$@\" >> $(git rev-parse --absolute-git-dir)/info/exclude; }; f"
	recent = "!f() { git for-each-ref --count=10 --sort=-committerdate refs/${1:-heads} --format='%(HEAD) %(color:blue)%(align:14)%(committerdate:relative)%(end)%(color:reset) %(color:red)%(align:10)%(objectname:short)%(end)%(color:reset) %(color:green)%(align:20)%(authorname)%(end)%(color:reset) %(color:yellow)%(refname:short)%(color:reset)\n  %(align:14)%(end) %(subject)'; }; f"

[filter "date-prop"]
	clean  = perl -pe 's/,,Date[^,]*,,/,,Date,,/i'
	smudge = perl -pe 's/,,Date[^,]*,,/,,Date: @{[scalar gmtime]},,/i'

[color]
	branch      = auto
	diff        = auto
	interactive = auto
	status      = auto

[color "status"]
	added     = green
	untracked = yellow
	updated   = blue
	changed   = red

[sendemail]
	from           = Aaron Schrab <aaron@schrab.com>
	envelopesender = aaron@schrab.com
	bcc            = aaron@schrab.com
	confirm        = always
	suppresscc     = self
	chainreplyto   = no
	thread         = yes

[upstream]
	urltag = qqx/upstream

[git-p4]
	skipSubmitEdit = true
	conflict = quit

[github]
	user = aschrab

[filter "lfs"]
	clean = git lfs clean %f
	smudge = git lfs smudge %f
	required = true

[url "ssh://pug.qqx.org/srv/git/"]
	pushInsteadOf = http://git.qqx.org/
	pushInsteadOf = git://git.qqx.org/
[url "ssh://git@github.com/"]
	pushInsteadOf = git://github.com/
	pushInsteadOf = https://github.com/
	pushInsteadOf = http://github.com/
	pushInsteadOf = gh:
[url "https://github.com/"]
	insteadOf = gh:
	insteadOf = git://github.com/
	insteadOf = http://github.com/
[url "git@bitbucket.org:aschrab/"]
	pushInsteadOf = https://bitbucket.org/aschrab/
[url "git@gitlab.com:aschrab/"]
	pushInsteadOf = https://gitlab.com/aschrab/

[url "ssh://git@gitlab.av/repository/"]
	insteadOf = https://gitlab.av/repository/
[includeIf "gitdir:vc/files/"]
	path = files.com

[include]
	path = ~/.gitconfig.local
	path = local

[includeIf "gitdir:/Users/"]
	path = mac
