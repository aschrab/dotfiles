Message.maildir = '/srv/mail/pug.qqx.org/ats'
Message.default_format = Maildir

#require 'gdbm'
#$dbfile = "#{Message.maildir}/dupcache"

begin
  save Time.now.strftime('=.backup-%Y-%m-%d' )
rescue Exception
  log "Couldn't write to backup file"
end

class ::Cropmail::Message
  def save_md mailbox
    dup = false
#    GDBM.open( $dbfile, 0600, GDBM::WRCREAT|GDBM::SYNC ) do |dbm|
#      key = "#{mailbox}:#{message_id}"
#      if dbm[key]
#        dup = true
#      else
#        dbm[key] = Time.now.to_i.to_s
#      end
#    end

    if dup
      log "Saving duplicate message"
      save '=.dups'
    else
      log "Saving message to #{mailbox}"
      save mailbox.sub(/^=/,'=.').gsub(%r</>,'.')
    end

    done
  end
end

if ENV['EXTENSION']
  $envelope_to = ENV['EXTENSION'].sub(/=([^=]*)/, '@\\1')
elsif ENV['RECIPIENT']
  $envelope_to = ENV['RECIPIENT']
end
headers.replace 'X-QQX-Envelope-To', $envelope_to

# Mailing list detection {{{
list = nil

list ||= 'debian/pts' if headers[:x_pts_package] =~ /\w/
list ||= 'subs/skeptic' if from =~ /<skepticsociety@skeptic.com>/i

case headers[:list_id]
when /<debian-([a-z0-9_-]+)\.lists\.debian\.org>/
  list = "debian/#$1".downcase
when /<mlug-list\..*\.milwaukeelug/i
  subject_re = /\[MLUG\]\s*/
  list = 'ug/mlug'
when /<fdllug-list\./i
  subject_re = /\[fdllug-list\]\s*/i
when /<offlineimap\.complete/i
  list = 'mail/offlineimap'
when /<dovecot\.dovecot/i
  list = 'mail/dovecot'
when /ruby-(talk|core)\.ruby-lang\.org/i
  list = "ruby/#{$1}"
when /ruby-dbi-(next|devel)\./
  subject_re = /\[Ruby-dbi-$1\]\s*/i
  list = "ruby/dbi"
when /\bmodruby\./
  list = 'ruby/modruby'
when /<raleigh-rb-members/
  subject_re = /\[raleigh\.rb\]\s*/i
  list = 'ruby/raleigh'
when /<trilug\.trilug\.org>/i
  subject_re = /\[TriLUG\]\s*/i
  list = 'ug/trilug'
end unless list

case headers[:mailing_list]
when /list milwpm@yahoogroups\.com/
  subject_re = /\[milwpm\]/i
  egroups = true
  list = 'ug/milwpm'
end unless list

case headers[:list_unsubscribe]
when /<mailto:mutt-dev-request@/i
  list = 'mail/mutt-dev'
  # FIXME add subject demangling
end unless list

case headers[:return_path]
when /<bugtraq-return-.*@securityfocus/i
  list = bugtraq
when /<lsm-workers-admin@lists/i
  list = 'lsm-workers'
when /<crypto-gram-return/i
  list = 'subs/crypto'
  fixlinks = yes
end unless list

case headers[:sender]
when /owner-spamtools@/i
  subject_re = /\[spamtools\]/i
  list = 'mail/spamtools'
when /list-managers-owner@greatc/i
  list = 'mail/list-managers'
end unless list
#}}}

subject_re = /\[foo\]\s*/i

begin
  subj = headers[:subject][0]
  log "Trying to clean up Subject: #{subj.inspect}"
  modified = true if subject_re and subj.sub! subject_re, ''
  reply = true if subj.sub! /(-reply\s*)+$/i, ''
  reply = true if subj.sub! /^(\s*Re(\[\d+\])?:)+/i, ''
  modified = subj = "Re: #{subj.strip}" if reply
  headers.replace 'Subject', subj.strip if modified
rescue Exception
  log "Error while cleaning subject: #{$!}"
end

headers.replace 'Lines', body.inject(0){ |sum,x| sum+1 }.to_s

if list
  save_md "=L/#{list.downcase}"
  done
end

save Message.maildir

# vim: ft=ruby fdm=marker
