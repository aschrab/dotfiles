Message.maildir = '/srv/mail/pug.qqx.org/ats'
Message.default_format = Maildir

require 'gdbm'
$dbfile = "#{Message.maildir}/dupcache"
$dupcheck = false

# Try to save to backup mailbox with today's date {{{
begin
  save Time.now.strftime('/srv/mail/pug.qqx.org/backup_ats/%Y/%m/%d' )
rescue Exception
  log "Couldn't write to backup file"
end #}}}

class ::Cropmail::Message
  def save_md mailbox #{{{
    dup = false

    if $dupcheck
      GDBM.open( $dbfile, 0600, GDBM::WRCREAT|GDBM::SYNC ) do |dbm|
        key = "#{mailbox}:#{message_id}"
        if dbm[key]
          dup = true
        else
          dbm[key] = Time.now.to_i.to_s
        end
      end
    end

    if dup
      log "Saving duplicate message"
      save '=.dups'
    else
      log "Saving message to #{mailbox}"
      save mailbox.sub(/^=/,'=.').gsub(%r</>,'.')
    end

    done
  end #}}}
end

# Drop some spam messages that have at times reached mailbomb levels {{{
if subject =~ /WARNING. Mail Delayed: hello$/
  done
end

done if subject =~ /Undeliverable mail: hello$/

if subject =~ /^Re: Mystery(secret.)?.shopper/i
  done
end
#}}}

if ENV['EXTENSION']
  $envelope_to = ENV['EXTENSION'].sub(/=([^=]*)/, '@\\1')
elsif ENV['RECIPIENT']
  $envelope_to = ENV['RECIPIENT']
end
headers.replace 'X-QQX-Envelope-To', $envelope_to

# Improve messages from faxaway {{{
fax_re = %r/Faxaway-\(([\d-]+).*\).*(<faxaway@faxaway\.com>)/i
match = fax_re.match from
if match
  number = match[1]
  headers.replace 'From', "#{match[1]} #{match[2]}"

  area = nil
  if npa = number[/^\d{3}/]
    File.open( '/usr/share/misc/npa.txt' ) do |f|
      f.each_line do |line|
        next unless line[/^#{npa}:/]
        info = line.chomp.split(':')
        area = " (#{info[1]}, #{info[3]})"
        break
      end
    end
  end

  if subject =~ /voice message/i
    map! do |msg,typ|
      if !typ and msg.content_type.type.downcase == 'text'
        msg = Cropmail::Message.new "\n\nVoicemail message from #{number}#{area}\n\n"
      end
      msg
    end
  end
  save Message.maildir
  done
end #}}}

if headers[:x_qqx_org_mailscanner_spamscore] =~ /s{5}/i
  save_md '=spam'
end

if headers[:x_spam_flag] =~ /YES/i
  save_md '=spam'
end

if headers[:from] =~ /postmaster@(pug\.)?qqx\.org/i
  save_md '=INBOX/junk'
end

# Mailing list detection {{{
list = nil

list ||= 'subs/skeptic' if from =~ /<skepticsociety@skeptic.com>/i

case headers[:list_id]
when /<debian-([a-z0-9_-]+)\.lists\.debian\.org>/
  list = "debian/#$1".downcase
when /<raleigh-rb-members/
  subject_re = /\[triangle\.rb\]\s*/i
  list = 'ruby/raleigh'
when /<raleigh-(talk|pm)\.pm\.org>/i
  subject_re = /\[Raleigh-pm\]\s*/i
  list = 'ug/raleigh-pm'
when /<trilug\.trilug\.org>/i
  subject_re = /\[TriLUG\]\s*/i
  list = 'ug/trilug'
when /<trilug-ontopic\.trilug\.org>/i
  subject_re = /\[TriLUG-ontopic\]\s*/i
  list = 'ug/trilug'
when /<dbix-class\.lists\.scsys\.co\.uk>/i
  subject_re = /\[Dbix-class\]/i
  list = 'perl/dbix'
when /<zsh-(workers|users)\.zsh\.org>/i
  list = 'dev/zsh'
when /<git\.vger\.kernel\.org>/i
  $dupcheck = true
  list = 'dev/git'
when /<tmux-users\.lists\.sourceforge\.net>/i
  list = 'dev/tmux'
when /<meld-list\.gnome\.org>/i
  list = 'dev/meld'
when /<i3-discuss\.i3\.zekjur\.net>/
  subject_re = /\[i3\]/i
  list = 'dev/i3'
when /<sqlfairy-developers\.lists\.sourceforge\.net>/i
  list = 'dev/sql-translator'
when /<mailscanner.lists.mailscanner.info>/i
  list = 'mail/scanner'
end unless list

case headers[:mailing_list]
when /list milwpm@yahoogroups\.com/
  subject_re = /\[milwpm\]/i
  egroups = true
  list = 'ug/milwpm'
end unless list

case headers[:list_post]
when /<mailto:mutt-dev@/i
  list = 'mail/mutt-dev'
end unless list

case headers[:return_path]
when /<bugtraq-return-.*@securityfocus/i
  list = 'bugtraq'
when /<lsm-workers-admin@lists/i
  list = 'lsm-workers'
end unless list

list ||= 'debian/pts' if headers[:x_pts_package] =~ /\w/
#}}}

# Cleanup subject {{{
begin
  subj = headers[:subject][0]
  log "Trying to clean up Subject: #{subj.inspect}"
  modified = (subject_re and subj.sub! subject_re, '')
  reply = true if subj.sub!( /(-reply\s*)+$/i, '' )
  reply = true if subj.sub!( /^(\s*Re(\[\d+\])?:)+/i, '' )
  modified = subj = "Re: #{subj.strip}" if reply
  headers.replace 'Subject', subj.strip if modified
rescue Exception
  log "Error while cleaning subject: #{$!}"
end
#}}}

headers.replace 'Lines', body.inject(0){ |sum,x| sum+1 }.to_s

if list
  save_md "=L/#{list.downcase}"
  done
end

# Messages to me using Cyrillic are almost certainly spam
if content_type.subfields['charset'] =~ /windows-1251/i
  save_md '=INBOX/junk'
end

save Message.maildir
done

# vim: ft=ruby
