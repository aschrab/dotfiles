Message.maildir = '/srv/mail/pug.qqx.org/ats'
Message.default_format = Maildir

#require 'gdbm'
#$dbfile = "#{Message.maildir}/dupcache"

begin
  save Time.now.strftime('/srv/mail/pug.qqx.org/backup_ats/%Y/%m/%d' )
rescue Exception
  log "Couldn't write to backup file"
end

class ::Cropmail::Message
  def save_md mailbox
    dup = false
#    GDBM.open( $dbfile, 0600, GDBM::WRCREAT|GDBM::SYNC ) do |dbm|
#      key = "#{mailbox}:#{message_id}"
#      if dbm[key]
#        dup = true
#      else
#        dbm[key] = Time.now.to_i.to_s
#      end
#    end

    if dup
      log "Saving duplicate message"
      save '=.dups'
    else
      log "Saving message to #{mailbox}"
      save mailbox.sub(/^=/,'=.').gsub(%r</>,'.')
    end

    done
  end
end

if subject =~ /^Re: Mystery(secret.)?.shopper/i
  done
end

if ENV['EXTENSION']
  $envelope_to = ENV['EXTENSION'].sub(/=([^=]*)/, '@\\1')
elsif ENV['RECIPIENT']
  $envelope_to = ENV['RECIPIENT']
end
headers.replace 'X-QQX-Envelope-To', $envelope_to

fax_re = %r/Faxaway-\(([\d-]+).*\).*(<faxaway@faxaway\.com>)/i
match = fax_re.match from
if match
  number = match[1]
  headers.replace 'From', "#{match[1]} #{match[2]}"

  area = nil
  if npa = number[/^\d{3}/]
    File.open( '/usr/share/misc/npa.txt' ) do |f|
      f.each_line do |line|
	next unless line[/^#{npa}:/]
	info = line.chomp.split(':')
	area = " (#{info[1]}, #{info[3]})"
	break
      end
    end
  end

  if subject =~ /voice message/i
    map! do |msg,typ|
      if !typ and msg.content_type.type.downcase == 'text'
	msg = Cropmail::Message.new "\n\nVoicemail message from #{number}#{area}\n\n"
      end
      msg
    end
  end
  save Message.maildir
  done
end

if from =~ /root@mail\.milwaukeelug\.org/i and subject =~ %r<^/var/log/auth\.log>
  filtered = ''
  prefix = '^\w{3} +\d{1,2} \d\d:\d\d:\d\d mlug '
  body.each do |line|
    next if line =~ /#{prefix}CRON\[\d+\]: pam_unix\(cron:session\): session opened for user root by \(uid=0\)$/
    next if line =~ /#{prefix}CRON\[\d+\]: pam_unix\(cron:session\): session closed for user root$/
    filtered << line
  end

  body.replace filtered
end

if to =~ /sympa-request|mlug-admin-editor/i
  save_md '=INBOX/sympa'
  done
end

if headers[:x_qqx_org_mailscanner_spamscore] =~ /s{5}/i
	save_md '=spam'
end

if headers[:from] =~ /webmaster@milwaukeelug/i and
  subject =~ /Wiki page .* (changed|created) by /i
  save_md '=INBOX/wiki'
  done
end

exit if headers[:from] =~ /<sympa@mail\.milwaukeelug\.org>/i and
  subject =~ /internal server error/i and
  body =~ /No message found in archives matching/i


# Mailing list detection {{{
list = nil

list ||= 'debian/pts' if headers[:x_pts_package] =~ /\w/
list ||= 'subs/skeptic' if from =~ /<skepticsociety@skeptic.com>/i

case headers[:list_id]
when /<debian-([a-z0-9_-]+)\.lists\.debian\.org>/
  list = "debian/#$1".downcase
when /<MilwaukeeRuby\.googlegroups\.com>/i
	list = 'ruby/mke'
	subject_re = /\[MKERB\]\s*/
when /<mlug-list\..*\.milwaukeelug/i
  subject_re = /\[MLUG\]\s*/
  list = 'ug/mlug'
when /<blinux\.googlegroups\.com>/i
  list = 'ug/blinux'
when /<fdllug-list\./i
  subject_re = /\[fdllug-list\]\s*/i
	list = 'ug/fdllug'
when /<list\.sewaug\.org>/i
  subject_re = /\[SEWAUG\]\s*/i
  list = 'ug/sewaug'
when /<offlineimap\.complete/i
  list = 'mail/offlineimap'
when /<dovecot\.dovecot/i
  list = 'mail/dovecot'
  subject_re = /\[Dovecot\]\s*/i
when /ruby-(talk|core)\.ruby-lang\.org/i
  list = "ruby/#{$1}"
when /ruby-dbi-(next|devel)\./
  subject_re = /\[Ruby-dbi-$1\]\s*/i
  list = "ruby/dbi"
when /\bmodruby\./
  list = 'ruby/modruby'
when /<rubyonrails-core\.googlegroups\.com>/i
	subject_re = /\[Rails-core\]\s*/i
	list = 'ruby/rails-core'
when /<raleigh-rb-members/
  subject_re = /\[raleigh\.rb\]\s*/i
  list = 'ruby/raleigh'
when /<raleigh-(talk|pm)\.pm\.org>/i
  subject_re = /\[Raleigh-pm\]\s*/i
  list = 'ug/raleigh-pm'
when /<trilug\.trilug\.org>/i
  subject_re = /\[TriLUG\]\s*/i
  list = 'ug/trilug'
when /<trilug-ontopic\.trilug\.org>/i
  subject_re = /\[TriLUG-ontopic\]\s*/i
  list = 'ug/trilug'
when /<dbix-class\.lists\.scsys\.co\.uk>/i
  subject_re = /\[Dbix-class\]/i
  list = 'perl/dbix'
when /<zsh-(workers|users)\.zsh\.org>/i
  list = 'dev/zsh'
when /<git\.vger\.kernel\.org>/i
  list = 'dev/git'
end unless list

case headers[:mailing_list]
when /list milwpm@yahoogroups\.com/
  subject_re = /\[milwpm\]/i
  egroups = true
  list = 'ug/milwpm'
end unless list

case headers[:list_post]
when /<mailto:mutt-dev@/i
  list = 'mail/mutt-dev'
  # FIXME add subject demangling
end unless list

case headers[:list_unsubscribe]
when /<mailto:mutt-dev-request@/i
  list = 'mail/mutt-dev'
  # FIXME add subject demangling
end unless list

case headers[:return_path]
when /<bugtraq-return-.*@securityfocus/i
  list = bugtraq
when /<lsm-workers-admin@lists/i
  list = 'lsm-workers'
when /<crypto-gram-return/i
  list = 'subs/crypto'
  fixlinks = yes
end unless list

case headers[:sender]
when /owner-spamtools@/i
  subject_re = /\[spamtools\]/i
  list = 'mail/spamtools'
when /list-managers-owner@greatc/i
  list = 'mail/list-managers'
end unless list
#}}}

begin
  subj = headers[:subject][0]
  log "Trying to clean up Subject: #{subj.inspect}"
  modified = (subject_re and subj.sub! subject_re, '')
  reply = true if subj.sub! /(-reply\s*)+$/i, ''
  reply = true if subj.sub! /^(\s*Re(\[\d+\])?:)+/i, ''
  modified = subj = "Re: #{subj.strip}" if reply
  headers.replace 'Subject', subj.strip if modified
rescue Exception
  log "Error while cleaning subject: #{$!}"
end

headers.replace 'Lines', body.inject(0){ |sum,x| sum+1 }.to_s

if list
  save_md "=L/#{list.downcase}"
  done
end

save Message.maildir
done

# vim: ft=ruby fdm=marker
