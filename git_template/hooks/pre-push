#!/bin/bash
set -ueo pipefail

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

die () {
  echo "$*" >&2
  exit 1
}

# shellcheck disable=SC2034
remote="$1"
# shellcheck disable=SC2034
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '0-9a-f' '0')
empty=$(git hash-object -t tree /dev/null | tr '0-9a-f' '0')

errors=0

reject() {
  echo "$*" >&2
  (( errors++ ))
}

no-rspec-focus() {
  [[ "$(git config --type=bool --default=no check.noRSpecFocus)" = true ]] || return
  [[ "${remote_oid}" = "${zero}" ]] && return # Don't check deletes

  if git diff "${base}..${local_oid}" spec | grep -q -E '^\+\s*f(it|describe|context)[[:>:]]'
  then
    reject "RSpec focus found in branch ${local_ref}"
  fi
}

no-wip-branches() {
  case "$local_ref" in
    */wip*)
      reject "Refusing to push work in progress branch '$local_ref'"
  esac
}

# shellcheck disable=SC2034
while read -r local_ref local_oid remote_ref remote_oid
do
  base="${remote_oid}"
  [[ "${base}" = "${zero}" ]] && base="${empty}"

  no-wip-branches
  no-rspec-focus
done

exit $errors
