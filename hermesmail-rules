require 'gdbm'

#self.spoolfile =
self.spooldir = "/srv/mail/ats"
self.maildir = "Mail"

self.default_format = Maildir

def mbox name
  Maildir.new "/srv/mail/ats/.#{name}"
end

def filter_duplicates list
  dbfile = "#{ENV['HOME']}/.dupcache"
  GDBM.open(dbfile, 0600, GDBM::WRCREAT|GDBM::SYNC) do |dbm|
    key = "#{list}:#{headers.message_id}"
    if dbm[key]
      deposit mbox :dups
    else
      dbm[key] = Time.now.to_i.to_s
    end
  end
rescue
end

def list name, subject: nil, dupcheck: false
  #$stderr.puts "List #{name}"

  filter_duplicates(name) if dupcheck

  begin # Cleanup subject
    original = headers.subject
    modified = original.dup

    if subject
      subject = Regexp.escape subject unless subject.is_a? Regexp
      modified.sub!(subject, '')
    end

    reply = true if modified.sub!( /(-reply\s*)+$/i, '' )
    reply = true if modified.sub!( /^(\s*Re(\[\d+\])?:)+/i, '' )
    modified.strip!
    modified = "Re: #{modified}" if reply

    headers.replace :Subject, modified unless modified == original
  rescue
  end

  deposit mbox "L.#{name}"
end

def mutt_alias name
  re = /^\s*alias\s+#{Regexp.escape name}\s+(.*)/
  File.open("#{ENV['HOME']}/.mutt/aliases") do |f|
    f.each_line do |l|
      case l
      when re
        return $1.split(',')
      end
    end
  end
  raise "Alias #{name} not found"
end

def process
  begin
    save Time.now.strftime('/srv/mail/qqx.org/backup_ats/%Y/%m/%d')
  rescue
  end

  begin
    headers.replace 'Lines', body.lines.size
  rescue
  end

  envelope_to =
    if ENV['EXTENSION']
      ENV['EXTENSION'].sub(/=([^=]*)/, '@\\1')
    elsif ENV['RECIPIENT']
      ENV['RECIPIENT']
    end
  headers.replace 'X-QQX-Envelope-To', envelope_to if envelope_to

  deposit mbox :spam if headers.x_spam_flag =~ /YES/i
  deposit mbox :junk if from.has?(/postmaster@(pug\.)?qqx\.org/i)
  deposit mbox :junk if addresses_of(:to).has?(/mailman-bounces.*@trilug\.org/i)

  case headers.list_id
  when /debian-([a-z0-9_-]+)\.lists\.debian\.org/
    list "debian.#$1".downcase
  when /mutt-(users|dev).mutt.org/
    list 'mail.mutt-dev'
  when /raleigh-rb-members/
    list 'ruby.raleigh', subject: /\[triangle\.rb\]\s*/i
  when /raleigh-(talk|pm)\.pm\.org/i
    list 'ug.raleigh-pm', subject: /\[Raleigh-pm\]\s*/i
  when /steering\.trilug\.org/i
    list 'ug.trilug.steering', subject: '[Steering]'
  when /volunteers\.trilug\.org/i
    list 'ug.trilug.volunteers', subject: '[TriLUG Volunteers]'
  when /linux-ham\.trilug\.org/i
    list 'ug.trilug.ham', subject: '[Linux-ham]'
  when /trilug\.trilug\.org/i
    unless headers.x_list_administrivia =~ /yes/i
      list 'ug.trilug', subject: /\[TriLUG\]\s*/i
    end
  when /trilug-ontopic\.trilug\.org/i
    list 'ug.trilug', subject: /\[TriLUG-ontopic\]\s*/i
  when /dbix-class\.lists\.scsys\.co\.uk/i
    list 'perl.dbix', subject: /\[Dbix-class\]/i
  when /zsh-(workers|users)\.zsh\.org/i
    list 'dev.zsh', dupcheck: true
  when /git\.vger\.kernel\.org/i
    list 'dev.git', dupcheck: true
  when /tmux-users\.lists\.sourceforge\.net/i
    list 'dev.tmux'
  when /meld-list\.gnome\.org/i
    list 'dev.meld'
  when /i3-discuss\.(freelists\.org|i3\.zekjur\.net)/
    list 'dev.i3', subject: /\[i3(-discuss)?\]/i
  when /sqlfairy-developers\.lists\.sourceforge\.net/i
    list 'dev.sql-translator', subject: /\[sqlfairy-developers\]/i
  when /mailscanner.lists.mailscanner.info/i
    list 'mail.scanner'
  when /bugtraq.list-id.securityfocus.com/
    list 'bugtraq'
  when /mailman-users\.mailman3\.org/i
    list 'mail.mailman3'
  when /sympa-users\.listes\.renater\.fr/i
    list 'mail.sympa'
  end

  case headers.list_unsubscribe
  when %r{<http://discourse.triangleruby.com/}
    list 'ug.trianglerb', subject: '[Triangle.rb Forum]'
  end

  # Practice on git list is to CC everyone involved, attempt to send
  # direct-to-me messages to the list folder
  #list 'dev.git', dupcheck: true if receivers.include? 'git@vger.kernel.org'

  list 'debian.pts' if headers.x_pts_package =~ /\w/
  list 'subs.skeptic' if from.has?(/eskeptic@skeptic.com/i)

  if from.has?(/noreturn@myfbo\.com/i)
    begin
      if body.match(/^Message sent by (.*?)  (\S+@\S+)$/)
        headers.replace 'From', %Q{"#$1" <#$2>}
      end
    rescue
      $stderr.puts $!
    end

    deposit mbox 'INBOX.wcfc'
  end

  if from.has?(/@(cooperpress\.com|peterc\.org)$/i)
    begin
      sendmail mutt_alias :newsblur
    rescue
    end
    deposit mbox 'INBOX.read'
  end

  if from.has?(/mailman.*[@.]trilug\.org/) and headers.x_list_administrivia =~ /yes/i
    filter_duplicates :inbox
  end

  #$stderr.puts "Saving to default mailbox"
  deposit Maildir.new "/srv/mail/ats"
end

# vim: ft=ruby
