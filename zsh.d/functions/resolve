#autoload

resolve() {
  setopt localoptions extended_glob #xtrace
  local res cmd continuation lookup_alias=y

  if [[ "${1:-}" = -p ]]; then
    shift
    command resolve "$@"
    return
  fi

  if [[ "${1:-}" = -c ]]; then
    continuation='=> '
    shift
  fi
  for cmd in "$@"; do
    if [[ "$cmd" = \\* ]]; then
      # starts with backslash, remove that and don't do alias lookup
      cmd=${cmd#\\}
      lookup_alias=n
    fi

    if [[ $lookup_alias = y ]] && (( $+aliases[$cmd] )); then
      res="${cmd}: aliased to ${aliases[$cmd]}"
    elif (( $+functions[$cmd] )); then
      # ensure that the function is loaded so that we display the actual definition rather than autoload stub
      autoload +X "$cmd"
      # it's a function, so use `which` to display the definition
      printf '%s\n' "$functions[$cmd]"
      # nothing further can be resolved, go to next argument
      continue
    else
      res=$commands[$cmd]
    fi

    case "$res" in
      (*shell built-in*)
        # nothing further to resolve, just state that it's a shell builtin
        echo "$continuation$res"
        ;;
      (*:*aliased*)
        # show alias definition
        echo "$continuation$res"

        # attempt to further resolve the command portion
        res="${res##*: aliased to }"
        # strip off pre-command modifiers
        res="${res/#( #(-|builtin|command|nocorrect|noglob)[[:IFS:]]##)##/}"
        res="${res%% *}" # Strip off arguments

        # If it now matches the command, prevent alias expansion on next attempt to avoid infinite loop
        [[ "$res" = "$cmd" ]] && res=\\"$res"
        resolve -c "$res"
        ;;
      (*)
        # if it's not already an absolute path, determine that from $commands associative array
        [[ "$res" = /* ]] || res=$commands[$res]

        # now that we've gotten out of the area of aliases and functions,
        # call the separate `resolve` script to handle symlinks
        command resolve -c "$res"
    esac
    continuation=''
  done
}

[ -n "$ZSH_NAME" ] && resolve "$@"
