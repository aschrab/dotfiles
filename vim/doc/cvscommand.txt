*cvscommand.txt*	CVSCommand

For instructions on installing this file, type
	:help add-local-help
inside Vim.

Author:  Bob Hiestand <bob@hiestandfamily.org>
Credits:  Benji Fisher's excellent MatchIt documentation

==============================================================================
1. Contents						*cvscommand-contents*

	Installation        : |cvscommand-install|
	CVSCommand Intro    : |cvscommand|
	CVSCommand Manual   : |cvscommand-manual|
        Customization       : |cvscommand-customize|
        Bugs                : |cvscommand-bugs|

==============================================================================

2. CVSCommand Installation				*cvscommand-install*

The CVSCommand plugin comprises two files, cvscommand.vim and cvscommand.txt
(this file).  In order to install the plugin, place the cvscommand.vim file
into a plugin' directory in your runtime path (please see |add-global-plugin|
and |'runtimepath'|.

CVSCommand may be customized by setting variables, creating maps, and
specifying event handlers.  Please see |cvscommand-customize| for more
details.

This help file can be included in the VIM help system by copying it into a
'doc' directory in your runtime path and then executing the |:helptags|
command, specifying the full path of the 'doc' directory.  Please see
|add-local-help| for more details.

==============================================================================

3. CVSCommand Intro					*cvscommand*
							*cvscommand-intro*

The CVSCommand plugin provides global ex commands for manipulating
CVS-controlled source files.  In general, each command operates on the current
buffer and accomplishes a separate cvs function, such as update, commit, log,
and others (please see |cvscommand-commands| for a list of all available
commands).  The results of each operation are displayed in a scratch buffer.
Several buffer variables are defined for those scratch buffers (please see
|cvscommand-buffer-variables|).

For convenience, any CVSCommand invoked on a CVSCommand scratch buffer acts as
though it was invoked on the original file and splits the screen so that the
output appears in a new window.

Many of the commands accept revisions as arguments.  By default, most operate
on the most recent revision on the current branch if no revision is specified
(though see |CVSCommandInteractive| to prompt instead).

Each CVSCommand is mapped to a key sequence starting with the <Leader>
keystroke.  The default mappings may be overridden by supplying different
mappings before the plugin is loaded, such as in the vimrc, in the standard
fashion for plugin mappings.  For examples, please see
|cvscommand-mappings-override|.

The CVSCommand plugin may be configured in several ways.  For more details,
please see |cvscommand-customize|.

==============================================================================

4. CVSCommand Manual					*cvscommand-manual*

4.1 CVSCommand commands					*cvscommand-commands*

CVSCommand defines the following commands:

:CVSAdd							*:CVSAdd*

This command performs "cvs add" on the current file.  Please note, this does
not commit the newly-added file.

:CVSAnnotate						*:CVSAnnotate*

This command performs "cvs annotate" on the current file.  If not given an
argument, uses the most recent version of the file on the current branch.
Otherwise, the argument is used as a revision number.  The filetype of the
CVSCommand scratch buffer is set to 'CVSAnnotate', to take advantage of the
bundled syntax file.

:CVSCommit						*:CVSCommit*

This is a two-step command.  The first step opens a buffer to accept a log
message.  When that buffer is written, it is automatically closed and the file
is committed using the information from that log message.  The commit can be
abandoned if the log message buffer is deleted or wiped before being written.

:CVSDiff						*:CVSDiff*

With no arguments, this performs "cvs diff" on the current file against the
current repository version.

With one argument, "cvs diff" is performed on the current file against the
specified revision.

With two arguments, cvs diff is performed between the specified
revisions of the current file.

This command uses the 'CVSCommandDiffOpt' variable to specify diff options.
If that variable does not exist, then 'wbBc' is assumed.  If you wish to have
no options, then set it to the empty string.

:CVSEdit						*:CVSEdit*

This command performs "cvs edit" on the current file.  Yes, the output buffer
in this case is almost completely useless.

:CVSLog							*:CVSLog*

Performs "cvs log" on the current file.

If an argument is given, it is passed as an argument to the "-r" option of
"cvs log".

:CVSRevert						*:CVSRevert*

Replaces the current file with the most recent version from the repository in
order to wipe out any undesired changes.

:CVSReview						*:CVSReview*

Retrieves a particular version of the current file.  If no argument is given,
the most recent version of the file on the current branch is retrieved.
Otherwise, the specified version is retrieved.

:CVSStatus						*:CVSStatus*

Performs "cvs status" on the current file.

:CVSUnedit						*:CVSUnedit*

Performs "cvs unedit" on the current file.  Again, yes, the output buffer here
is basically useless.

:CVSUpdate						*:CVSUpdate*

Performs "cvs update" on the current file.  This intentionally does not
automatically reload the current buffer, though vim should prompt the user to
do so if the underlying file is altered by this command.

:CVSVimDiff						*:CVSVimDiff*

With no arguments, this prompts the user for a revision and then uses vimdiff
to display the differences between the current file and the specified
revision.  If no revision is specified, the most recent version of the file on
the current branch is used.

With one argument, that argument is used as the revision as above.  With two
arguments, the differences between the two revisions is displayed using
vimdiff.

With either zero or one argument, the original buffer is used to perform the
vimdiff.  When the other buffer is closed, the original buffer will be
returned to normal mode.

4.2 Mappings						*cvscommand-mappings*

By default, a mapping is defined for each command.  These mappings execute the
default (no-argument) form of each command.

<Leader>ca CVSAdd
<Leader>cn CVSAnnotate
<Leader>cc CVSCommit
<Leader>cd CVSDiff
<Leader>ce CVSEdit
<Leader>cl CVSLog
<Leader>cr CVSReview
<Leader>cs CVSStatus
<Leader>ct CVSUnedit
<Leader>cu CVSUpdate
<Leader>cv CVSVimDiff

						*cvscommand-mappings-override*

The default mappings can be overriden by user-provided instead by mapping to
<Plug>CommandName.  This is especially useful when these mappings collide with
other existing mappings (vim will warn of this during plugin initialization,
but will not clobber the existing mappings).

For instance, to override the default mapping for :CVSAdd to set it to '\add',
add the following to the vimrc:

nmap \add <Plug>CVSAdd

4.3 Automatic buffer variables			*cvscommand-buffer-variables*

Several buffer variables are defined in each CVSCommand result buffer.  These
may be useful for additional customization in callbacks defined in the event
handlers (please see |cvscommand-events|).

The following variables are automatically defined:

b:cvsOrigBuffNR						*b:cvsOrigBuffNR*

This variable is set to the buffer number of the source file.

b:cvscmd						*b:cvscmd*

This variable is set to the name of the cvs command that created the result
buffer.
==============================================================================

5. Configuration and customization			*cvscommand-customize*
							*cvscommand-config*

The CVSCommand plugin can be configured in two ways:  by setting configuration
variables (see |cvscommand-options|) or by defining CVSCommand event handlers
(see |cvscommand-events|). 

5.1 CVSCommand configuration variables			*cvscommand-options*

Several variables affect the plugin's behavior.  These variables are checked
at time of execution, and may be defined at the window, buffer, or global
level and are checked in that order of precedence.

The following variables are available:

CVSCommandDeleteOnHide				*CVSCommandDeleteOnHide*

This variable, if set to a non-zero value, causes the temporary CVS result
buffers to automatically delete themselves when hidden.

CVSCommandDiffOpt				*CVSCommandDiffOpt*

This variable, if set, determines the options passed to the diff command of
CVS.  If not set, it defaults to 'wbBc'.

CVSCommandNameMarker				*CVSCommandNameMarker*

This variable, if set, configures the special attention-getting characters
that appear on either side of the cvs buffer type in the buffer name.  If not
set, it defaults to '_'.

CVSCommandSplit					*CVSCommandSplit*

This variable controls the orientation of the various window splits that
may occur (such as with CVSVimDiff, when using a CVS command on a CVS
command buffer, or when the |CVSCommandEdit| variable is set to 'split'.
If set to 'horizontal', the resulting windows will be on stacked on top of
one another.  If set to 'vertical', the resulting windows will be
side-by-side.  If not set, it defaults to 'horizontal' for all but
CVSVimDiff windows.

CVSCommandDiffSplit				*CVSCommandDiffSplit*

This variable overrides the |CVSCommandSplit| variable, but only for buffers
created with |:CVSVimDiff|.

CVSCommandEdit					*CVSCommandEdit*

This variable controls whether the original buffer is replaced ('edit') or
split ('split').  If not set, it defaults to 'edit'.

CVSCommandInteractive				*CVSCommandInteractive*

This variable, if set to a non-zero value, causes appropriate commands (for
the moment, only |:CVSReview|) to query the user for a revision to use instead
of the current revision if none is specified.

5.2 CVSCommand events					*cvscommand-events*

For additional customization, CVSCommand can trigger user-defined events.
Event handlers are provided by defining User event autocommands (see
|autocommand|, |User|) in the CVSCommand group with patterns matching the
event name.

For instance, the following could be added to the vimrc to provide a 'q'
mapping to quit a CVSCommand scratch buffer:

augroup CVSCommand
  au CVSCommand User CVSBufferCreated silent! nmap <unique> <buffer> q:bwipeout<cr> 
augroup END

The following hooks are available:

CVSBufferCreated           This event is fired just after a cvs command
                           result buffer is created and filled with the
                           result of a cvs command.  It is executed within
                           the context of the CVS command buffer.  The
			   CVSCommand buffer variables may be useful for
			   handlers of this event (please see
			   |cvscommand-buffer-variables|).

CVSPluginInit              This event is fired when the CVSCommand plugin
                           first loads.

CVSPluginFinish            This event is fired just after the CVSCommand
                           plugin loads.

==============================================================================

6. Known bugs						*cvscommand-bugs*

None at the moment.  Please let me know if you run across any.

vim:tw=78:ts=8:ft=help
