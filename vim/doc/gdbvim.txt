*gdbvim.txt* Plugin for gdb cooperation

You will want to use the plugin if you use gdbvim program. Mappings and
commands described below will not work until you run a gdbvim program that
will speak to given instance of vim.

More precisely, the usage is as follows:

Step 1:
		Launch vim or gvim with particular name. (optional - if you
		omit this step, gvim shall be launched)
Step 2:
		Run gdbvim as if you were running gdb, only with other
		optional parameter --server for server name. 

After that, you can work normally in gdb window, or send commands from vim.

Mappings:				*gdbvim-mappings*

<Leader><F2>	
		Run a program
<Leader><F5>	
		Step program until it reaches a different source line. With
		[count]: do this N times.
<Leader><F6>	
		Step program, proceeding through subroutine calls. With
		[count]: do this N times.
<Leader><F7>	
		Execute until selected stack frame returns.
<Leader><F8>	
		Continue program being debugged, after signal or breakpoint.
		With [count]: ignore this breakpoint N-1 times.
<Leader><C-P>	
		Print value of word below cursor(normal mode) or of
		visually selected text (visual mode).
<Leader><C-F8>	
		Set breakpoint on current line.

See |<Leader>| for what does <Leader> mean, or just use backslash before keys.

Commands:				*gdbvim-commands*

Gdb {text}	
		Execute given text in gdb as if it came from console. If
		[count] is specified, it is appended as a number behind the
		command. If you create mapping for this and expect [count] to
		be used with it, use <C-U> this way:
			map key :<C-U>Gdb command
		(See |c_CTRL-U| and |v:count| for why it is needed)

					*gdbvim-settings*
loaded_gdbvim_mappings	Set to prevent activating mappings as above; only :Gdb
			command will work then.
loaded_gdbvim		Set to prevent loading the plugin completely.
