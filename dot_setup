#!/usr/bin/env perl

=head1 NAME

dot_setup

=head1 DESCRIPTION

Create symlinks in home directory to files in directory which contains this
script.  Symlink names will be same as the target name, but with a C<.>
prepended.

Files to be linked to are listed as command line arguments.  If the name
C<USUAL> is given as an argument, that file in the target directory will be
opened, and each line in it will be added to the files specified on the command
line.

=cut

use strict;
use warnings;

my $home = $ENV{HOME};

# Get location of files from script location
my $src = $0;
# Convert relative path to absolute
$src = "$ENV{PWD}/$src" unless $src =~ m{^/};
# Eliminate useless references to "." directory
1 while $src =~ s{/\./}{/};
# Eliminate uses of ".."
1 while $src =~ s{/[^/]+/\.\./}{/};
# Remove script filename to get just dir name
$src =~ s{/[^/]+$}{};
# Convert to being relative to home
$src =~ s{^$home/?}{};

foreach my $f (@ARGV) {
	chomp $f;
	next if $f =~ /dot_setup/; # Never link this script

	# IF "USUAL" is used as name to link, actually each line in that file as a name to link
	if( $f =~ /USUAL/ ) {
		open USUAL, '<', "$src/$f" or die $!;
		push @ARGV, <USUAL>;
		close USUAL;
		next;
	}

	my $dest = "$ENV{HOME}/.$f"; # Name of link to use

	# If the link is supposed to be in a subdirectory:
	# * Make sure the parent directories exist
	# * Adjust the symlink to go up to home before pointing to target
	my $parents = "";
	my $dirs = "";
	while( $f =~ m{([^/]+/)}g ) {
		$dirs .= $1;
		$parents .= "../";
		unless ( -d "$home/$dirs" ) {
			mkdir "$home/$dirs" or die;
		}
	}

	# Indicate what targets already exist and which are going to be created
	my $status = -e $dest ? '.' : '+';
	print "$status $f\n";

	next unless $status eq '+';
	symlink "$parents$src/$f" => $dest or die; # Create the link
}
