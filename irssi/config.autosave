servers = (
  #  { address = "schala.wiscnet.net"; chatnet = "OPN"; port = "6667"; },
  { address = "irc.oftc.net"; chatnet = "oftc"; port = "6667"; },
  {
    address = "daemonic.foonetic.net";
    # "irc.havoc.org";
    chatnet = "havoc";
    port = "6697";
    autoconnect = "yes";
    use_ssl = "yes";
  },
  {
    address = "irc.jakesys.net";
    chatnet = "jbs";
    port = "6697";
    autoconnect = "yes";
    use_ssl = "yes";
  },
  { address = "irc.openprojects.net"; chatnet = "OPN"; port = "6667"; },
  {
    address = "irc.freenode.org";
    chatnet = "freenode";
    port = "6667";
    use_ssl = "no";
    autoconnect = "yes";
  },
  {
    address = "irc.perl.org";
    chatnet = "perl";
    port = "6667";
    autoconnect = "yes";
  }
);

chatnets = {
  OPN = { type = "IRC"; nick = "qqx"; };
  oftc = {
    type = "IRC";
    max_kicks = "4";
    max_modes = "4";
    max_msgs = "1";
    nick = "qqx";
  };
  jbs = { type = "IRC"; nick = "ats"; };
  havoc = { type = "IRC"; nick = "ats"; };
  freenode = {
    type = "IRC";
    nick = "qqx";
    autosendcmd = "/^msg nickserv identify AMgpiGT7;wait -freenode 2000";
  };
  perl = { type = "IRC"; nick = "qqx"; };
};

channels = (
  { name = "#raleigh.pm"; chatnet = "perl"; autojoin = "yes"; },
  { name = "#trilug"; chatnet = "freenode"; autojoin = "yes"; },
  { name = "#jbs"; chatnet = "jbs"; autojoin = "yes"; },
  { name = "#mlug"; chatnet = "havoc"; autojoin = "yes"; },
  { name = "#tivo"; chatnet = "OPN"; },
  { name = "#havoc"; chatnet = "havoc"; }
);

aliases = {
  J = "join";
  WJOIN = "join -window";
  WQUERY = "query -window";
  LEAVE = "part";
  BYE = "quit";
  EXIT = "quit";
  SIGNOFF = "quit";
  DESCRIBE = "action";
  DATE = "time";
  HOST = "userhost";
  LAST = "lastlog";
  SAY = "msg *";
  WI = "whois";
  WII = "whois $0 $0";
  WW = "whowas";
  W = "who";
  N = "names";
  M = "msg";
  T = "topic";
  C = "clear";
  CL = "clear";
  K = "kick";
  KB = "kickban";
  KN = "knockout";
  BANS = "ban";
  B = "ban";
  MUB = "unban *";
  UB = "unban";
  IG = "ignore";
  UNIG = "unignore";
  SB = "scrollback";
  UMODE = "mode $N";
  WC = "window close";
  WN = "window new hide";
  SV = "say Irssi $J ($V) - http://irssi.org/";
  GOTO = "sb goto";
  CHAT = "dcc chat";
  RUN = "SCRIPT LOAD";
  SBAR = "STATUSBAR";
  INVITELIST = "mode $C +I";
};

statusbar = {
  # formats:
  # when using {templates}, the template is shown only if it's argument isn't
  # empty unless no argument is given. for example {sb} is printed always,
  # but {sb $T} is printed only if $T isn't empty.

  items = {
    # start/end text in statusbars
    barstart = "{sbstart}";
    barend = "{sbend}";

    # treated "normally", you could change the time/user name to whatever
    time = "{sb $Z}";
    user = "{sb $cumode$N{sbmode $usermode}{sbaway $A}}";

    # treated specially .. window is printed with non-empty windows,
    # window_empty is printed with empty windows
    window = "{sb $winref:$T{sbmode $M}}";
    window_empty = "{sb $winref{sbservertag $tag}}";
    prompt = "{prompt $[.15]T}";
    prompt_empty = "{prompt $winname}";
    topic = " $topic";
    topic_empty = " Irssi v$J - http://irssi.org/help/";

    # all of these treated specially, they're only displayed when needed
    lag = "{sb Lag: $0-}";
    act = "{sb Act: $0-}";
    more = "-- more --";
  };

  # there's two type of statusbars. root statusbars are either at the top
  # of the screen or at the bottom of the screen. window statusbars are at
  # the top/bottom of each split window in screen.
  default = {
    # the "default statusbar" to be displayed at the bottom of the window.
    # contains all the normal items.
    window = {
      disabled = "no";

      # window, root
      type = "window";
      # top, bottom
      placement = "bottom";
      # number
      position = "1";
      # active, inactive, always
      visible = "active";

      # list of items in statusbar in the display order
      items = {
        barstart = { priority = "100"; };
        time = { };
        user = { };
        window = { };
        window_empty = { };
        lag = { priority = "-1"; };
        act = { priority = "10"; };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
    };

    # statusbar to use in inactive split windows
    window_inact = {
      type = "window";
      placement = "bottom";
      position = "1";
      visible = "inactive";
      items = {
        barstart = { priority = "100"; };
        window = { };
        window_empty = { };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
    };

    # we treat input line as yet another statusbar :) It's possible to
    # add other items before or after the input line item.
    prompt = {
      type = "window";
      placement = "bottom";
      # we want to be at the bottom always
      position = "100";
      visible = "active";
      items = {
        prompt = { priority = "-1"; };
        prompt_empty = { priority = "-1"; };
        # treated specially, this is the real input line.
        input = { priority = "10"; };
      };
    };

    # topicbar
    topic = {
      type = "window";
      placement = "top";
      position = "1";
      visible = "always";
      items = {
        barstart = { priority = "100"; };
        topic = { };
        topic_empty = { };
        barend = { priority = "100"; alignment = "right"; };
      };
    };
  };
};
settings = {
  core = {
    real_name = "Aaron Schrab";
    user_name = "ats";
    nick = "ats";
    server_reconnect_time = "90";
  };
  "fe-common/core" = {
    autolog = "yes";
    use_status_window = "yes";
    autocreate_query_level = "MSG";
    show_nickmode_empty = "no";
    autoclose_query = "3600";
    theme = "foxmask";
    term_charset = "utf-8";
  };
  "fe-text" = {
    scroll_page_count = "/1.2";
    autostick_split_windows = "no";
    actlist_sort = "refnum";
  };
  proxy = {
    irssiproxy_password = "ohR0bii7";
    irssiproxy_ports = "havoc=9100 freenode=9101 perl=9102 jbs=9103";
  };
};
keyboard = (
  { key = "end"; id = "scroll_end"; data = ""; },
  { key = "home"; id = "scroll_start"; data = ""; },
  #  { key = "^F"; id = "forward_character"; data = ""; },
  #  { key = "ctrl-f"; id = "scroll_forward"; data = ""; }
);
logs = { };
ignores = (
  { mask = "fundraising"; level = "NOTICES"; },
  { mask = "*!*@*.freenode"; level = "NOTICES"; },
  {
    level = "CRAP MSGS NOTICES SNOTES CTCPS JOINS PARTS QUITS MODES WALLOPS INVITES NICKS DCC DCCMSGS CLIENTNOTICES CLIENTCRAP CLIENTERRORS";
    channels = ( "#trilug" );
  },
  {
    level = "CRAP MSGS NOTICES SNOTES CTCPS JOINS PARTS QUITS MODES WALLOPS INVITES NICKS DCC DCCMSGS CLIENTNOTICES CLIENTCRAP CLIENTERRORS";
    channels = ( "#raleigh.rb" );
  }
);
